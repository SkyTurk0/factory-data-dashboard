services:
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: factory_mssql
    env_file:
      - .env
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_PASS}
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - mssql_data:/var/opt/mssql
      - ./db:/db
    healthcheck:
      test: [ "CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U ${DB_USER} -P ${DB_PASS} -C -Q 'SELECT 1' || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10


  db_init:
    image: mcr.microsoft.com/mssql/server:2022-latest
    depends_on:
      mssql:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./db:/db:ro
    command:
      - /bin/bash
      - -lc
      - |
        set -euo pipefail;
        if /opt/mssql-tools18/bin/sqlcmd -S mssql -U "${DB_USER}" -P "${DB_PASS}" -C -h -1 -W \
          -Q "SET NOCOUNT ON; IF DB_ID('${DB_NAME}') IS NULL SELECT 0 ELSE SELECT 1" | grep -q '^1$'; then
          echo "FactoryDB already exists â€” skipping init."
          exit 0
        fi

        echo "Waiting a moment for SQL to accept logins...";
        sleep 5;
        for file in /db/*.sql; do
          echo "==> Running $$file";
          /opt/mssql-tools18/bin/sqlcmd -S mssql -U "${DB_USER}" -P "${DB_PASS}" -C -b -i "$$file";
        done;
        echo "All scripts applied.";


  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    container_name: factory_backend
    env_file:
      - .env
    environment:
      # override DB_SERVER to use the service name inside the Docker network
      DB_SERVER: mssql,1433
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      ODBC_DRIVER: ${ODBC_DRIVER}
    volumes:
      - ./backend:/app
      - /app/.venv  # avoid mounting host venv into container
    ports:
      - "5000:5000"
    depends_on:
      mssql:
        condition: service_healthy
      db_init:
        condition: service_completed_successfully

  frontend:
    build: ./frontend
    container_name: factory_frontend
    environment:
      # Browser will call backend on your host at :5000
      VITE_API_BASE: "http://localhost:5000"
      # Optional: polling helps file change detection on some setups
      CHOKIDAR_USEPOLLING: "true"
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules   # keep node_modules inside container
    ports:
      - "5173:5173"
    depends_on:
      - backend

  etl_run:
    build:
      context: .
      dockerfile: backend/Dockerfile
    working_dir: /app
    command: ["python", "-u", "etl/ingest_logs.py"]
    env_file: [.env]
    environment:
      DB_SERVER: mssql,1433
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      ODBC_DRIVER: ${ODBC_DRIVER}
      DATA_DIR: /app/data
      STATE_DIR: /app/.etl_state
    volumes:
      - ./:/app:rw
    depends_on:
      mssql:
        condition: service_healthy
    restart: "no"


volumes:
  mssql_data:

  
